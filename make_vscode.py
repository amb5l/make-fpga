################################################################################
# make_vscode.py
# A part of make-fpga - see https://github.com/amb5l/make-fpga
# This script generates makefiles for use with GNU make to
# edit FPGA designs or simulations with Visual Studio Code and V4P.
################################################################################

import sys,os,argparse
from make_fpga import *

# parse arguments

parser = argparse.ArgumentParser(
    prog='make_fpga.py',
    description='Create makefiles for editing FPGA designs with Visual Studio Code and V4P',
   )
parser.add_argument(
    '--work',
    help='work library (defaults to "work")',
    default='work'
   )
parser.add_argument(
    '--src',
    required=True,
    nargs='+',
    action='append',
    help='source(s) (append =LIB to specify library name)'
   )
parser.add_argument(
    '--top',
    action='append',
    help='top level design unit(s)'
   )
parser.add_argument(
    '-q',
    '--quiet',
    action='store_true',
    help='suppress comments'
   )

args=parser.parse_args()
_,d=process_src(args.src,args.work)

# output

print('# makefile generated by make_fpga.py (see https://github.com/amb5l/make-fpga)')
LIB=list(d)
if not args.quiet:
    print('# for editing FPGA source code with Visual Studio Code and V4P.')
    print('')
    print('################################################################################')
    print('')
    print('# libraries')
print('LIB:='+' '.join(d))
if not args.quiet:
    print('')
    print('# path(s) to source(s) for each library')
for l,s in d.items():
    print('SRC.'+l+':= \\\n\t'+' \\\n\t'.join(s))
if not args.quiet:
    print('')
    print('# top level design unit(s)')
print('TOP:='+' '.join(args.top))
if not args.quiet:
    print('')
    print('################################################################################')
    print('')
    print('# useful definitions')
print('space:=$(subst x, ,x)')
print('comma:=,')
if not args.quiet:
    print('')
    print('# generate rules and recipes to create all symbolic links')
print('ifeq ($(OS),Windows_NT)')
print('define rr_symlink')
print('$1/$(notdir $2): $2')
print('\tbash -c "mkdir -p $$(dir $$@)"')
print('\tbash -c "cmd.exe //C \\\"mklink $$(shell cygpath -w $$@) $$(shell cygpath -w -a $$<)\\\""')
print('endef')
print('else')
print('define rr_symlink')
print('$1/$(notdir $2): $2')
print('\tmkdir -p $$(dir $$@)')
print('\tln $$< $$@')
print('endef')
print('endif')
print('$(foreach l,$(LIB),$(foreach s,$(SRC.$l),$(eval $(call rr_symlink,$l,$s))))')
if not args.quiet:
    print('')
    print('# library directory(s) containing symbolic link(s) to source(s)')
print('$(foreach l,$(LIB),$(eval $l: $(addprefix $l/,$(notdir $(SRC.$l)))))')
if not args.quiet:
    print('')
    print('# editing session')
print('.PHONY: vscode')
print('vscode: config.v4p $(LIB)')
print('\tcode .')
if not args.quiet:
    print('')
    print('# V4P configuration file')
print('config.v4p: $(LIB)')
print('\techo "[libraries]" > config.v4p')
print('\t$(foreach l,$(LIB),$(foreach s,$(SRC.$l),echo "$l/$(notdir $s)=$l" >> config.v4p;))')
print('\techo "[settings]" >> config.v4p')
print('\techo "V4p.Settings.Basics.TopLevelEntities=$(subst $(space),$(comma),$(TOP))" >> config.v4p')
